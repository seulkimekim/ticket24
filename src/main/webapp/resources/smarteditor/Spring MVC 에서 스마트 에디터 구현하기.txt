>>>> Spring MVC 에서 스마트 에디터 구현하기 <<<<

 1. 스마트 에디터를 다운받아 /webapp/resources/ 아래에 smarteditor 폴더를 생성후
    그 아래에 다운받은 스마트 에디터 소스를 붙여두기를 한다.
 
  
 2. jQuery + 에디터관련JS파일을 include 한다.

    /Board/src/main/webapp/WEB-INF/tiles/layout/layout-tiles1.jsp 에서
    
    <script type="text/javascript" src="<%=request.getContextPath() %>/resources/smarteditor/js/HuskyEZCreator.js" charset="utf-8"></script>
       을 추가한다. 


 3. /Board/src/main/webapp/WEB-INF/views/tiles1/board/add.jsp 에서

   <script type="text/javascript">

	$(document).ready(function(){
		
	    //전역변수
	    var obj = [];
	    
	    //스마트에디터 프레임생성
	    nhn.husky.EZCreator.createInIFrame({
	        oAppRef: obj,
	        elPlaceHolder: "content",
	        sSkinURI: "<%= request.getContextPath() %>/resources/smarteditor/SmartEditor2Skin.html",
	        htParams : {
	            // 툴바 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseToolbar : true,            
	            // 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseVerticalResizer : true,    
	            // 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseModeChanger : true,
	        }
	    });
	    
	    //쓰기버튼
	    $("#btnWrite").click(function(){
	        //id가 content인 textarea에 에디터에서 대입
	        obj.getById["content"].exec("UPDATE_CONTENTS_FIELD", []);
	        
            //스마트에디터 사용시 무의미하게 생기는 p태그 제거
	        var contentval = $("#content").val();
		        
	        // === 확인용 ===
	        // alert(contentval); // content에 내용을 아무것도 입력치 않고 쓰기할 경우 알아보는것.
	        // "<p>&nbsp;</p>" 이라고 나온다.
	        
	        // 스마트에디터 사용시 무의미하게 생기는 p태그 제거하기전에 먼저 유효성 검사를 하도록 한다.
	        // 글내용 유효성 검사 
	        if(contentval == "" || contentval == "<p>&nbsp;</p>") {
	        	alert("글내용을 입력하세요!!");
	        	return;
	        }
	        
	        // 스마트에디터 사용시 무의미하게 생기는 p태그 제거하기
	        contentval = $("#content").val().replace(/<p><br><\/p>/gi, "<br>"); //<p><br></p> -> <br>로 변환
	    /*    
	              대상문자열.replace(/찾을 문자열/gi, "변경할 문자열");
	        ==> 여기서 꼭 알아야 될 점은 나누기(/)표시안에 넣는 찾을 문자열의 따옴표는 없어야 한다는 점입니다. 
	                     그리고 뒤의 gi는 다음을 의미합니다.
	
	        	g : 전체 모든 문자열을 변경 global
	        	i : 영문 대소문자를 무시, 모두 일치하는 패턴 검색 ignore
	    */    
	        contentval = contentval.replace(/<\/p><p>/gi, "<br>"); //</p><p> -> <br>로 변환  
	        contentval = contentval.replace(/(<\/p><br>|<p><br>)/gi, "<br><br>"); //</p><br>, <p><br> -> <br><br>로 변환 
	        contentval = contentval.replace(/(<p>|<\/p>)/gi, ""); //<p> 또는 </p> 모두 제거시
	    
	        $("#content").val(contentval);
	     // alert(contentval); 	        
	        
	        //폼 submit
	        var writeFrm = document.writeFrm;
			writeFrm.action = "<%= request.getContextPath() %>/addEnd.action";
			writeFrm.method = "POST";
			writeFrm.submit();
	    });
		
	}); // end of ready()-------------------------------------------
	
  </script>


  **  textarea 태그에서 required="required" 속성을 사용하면 
      스마트 에디터는 오류가 발생하므로 사용하지 않는다. **
  <tr>
      <th>내 용</th>
      <td>
 	  <textarea name="content" id="content" rows="10" cols="100" style="width:766px; height:412px;"></textarea>
      </td>
  </tr>



 4. /Board/src/main/webapp/WEB-INF/views/tiles1/board/edit.jsp 에서

  <script type="text/javascript">

	$(document).ready(function(){
	
	    //전역변수
	    var obj = [];
	    
	    //스마트에디터 프레임생성
	    nhn.husky.EZCreator.createInIFrame({
	        oAppRef: obj,
	        elPlaceHolder: "content",
	        sSkinURI: "<%= request.getContextPath() %>/resources/smarteditor/SmartEditor2Skin.html",
	        htParams : {
	            // 툴바 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseToolbar : true,            
	            // 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseVerticalResizer : true,    
	            // 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)
	            bUseModeChanger : true,
	        }
       });
    
      //완료버튼
      $("#btnUpdate").click(function(){
          //id가 content인 textarea에 에디터에서 대입
          obj.getById["content"].exec("UPDATE_CONTENTS_FIELD", []);
        
          // 유효성 검사 생략
          //폼 submit
          var editFrm = document.editFrm;
          editFrm.action = "<%= request.getContextPath() %>/editEnd.action";
          editFrm.method = "POST";
          editFrm.submit();
      });
	
   }); // end of ready()-------------------------------------------

  </script>


  <tr>
      <th>내용</th>
      <td>
	 <textarea name="content" id="content" rows="10" cols="100" style="width:766px; height:412px;">${boardvo.content}</textarea>
      </td> 
  </tr>



 5. 사진첨부
    /webapp/resources/smarteditor/sample/photo_uploader/photo_uploader.html 에 가면
    form 태그가 존재합니다.

  <form id="editor_upimage" name="editor_upimage" action="FileUploader.php" method="post" enctype="multipart/form-data" onSubmit="return false;">
        <div id="pop_content2">
	    <input type="file" class="upload" id="uploadInputBox" name="Filedata">
            <p class="dsc" id="info"><strong>10MB</strong>이하의 이미지 파일만 등록할 수 있습니다.<br>(JPG, GIF, PNG, BMP)</p>
        </div>
  </form>

  위의 action="FileUploader.php" 의미가 없으므로 아래와 같이 삭제해주시던가 "FileUploader.php" 값을 지워주도록 합니다.

  <form id="editor_upimage" name="editor_upimage" method="post" enctype="multipart/form-data" onSubmit="return false;">
        <div id="pop_content2">
	    <input type="file" class="upload" id="uploadInputBox" name="Filedata">
            <p class="dsc" id="info"><strong>10MB</strong>이하의 이미지 파일만 등록할 수 있습니다.<br>(JPG, GIF, PNG, BMP)</p>
        </div>
  </form>


 6. /webapp/resources/smarteditor/sample/photo_uploader/attach_photo.js 에 가서
    
   ==> 479번째 줄의 callFileUploader () 함수(단일사진첨부함수)를 보면 

     sUrl  : location.href.replace(/\/[^\/]*$/, '') + '/file_uploader.php',  //샘플 URL입니다.
     sCallback : location.href.replace(/\/[^\/]*$/, '') + '/callback.html',  //업로드 이후에 iframe이 redirect될 콜백페이지의 주소

    위코드를 아래처럼 재정의 해주도록 합니다.

     sUrl  : '/board/image/photoUpload.action',	  // 파일업로드시 동작되는 컨트롤러 URL
     sCallback : location.href.replace(/\/[^\/]*$/, '') + '/callback.html',	//업로드 이후  redirect 페이지 URL

   ==> 이어서 뒤에서 해야할 다중사진첨부를 위해 333번째 줄의 html5Upload() 함수(다중사진첨부함수)를 보시면 

     sUploadURL= 'file_uploader_html5.php';  //upload URL 

    위코드를 아래처럼 변경해주도록 합니다

     sUploadURL= '/board/image/multiplePhotoUpload.action';     //다중파일업로드시 동작되는 컨트롤러 URL


   클라이언트 설정변경을 위와같이 모두 해주셨다면 이어서 서버페이지 코드작성을 해보도록 하겠습니다.

  
 7. 사진첨부파일을 받기위한 파일관련 VO 정의

   public class PhotoVO {

      private MultipartFile Filedata;     
           //photo_uploader.html페이지의 form태그내에 존재하는 file 태그의 name명과 일치시켜줌

      private String callback;
           //callback URL
    
      private String callback_func;
           //콜백함수??
 
      public MultipartFile getFiledata() {
          return Filedata;
      }
  
      public void setFiledata(MultipartFile filedata) {
          Filedata = filedata;
      }
 
      public String getCallback() {
          return callback;
      }
 
      public void setCallback(String callback) {
          this.callback = callback;
      }
 
      public String getCallback_func() {
          return callback_func;
      }
 
      public void setCallback_func(String callback_func) {
          this.callback_func = callback_func;
      }
  }



 8. 기존의 com.spring.common.FileManager 클래스에서 
   - 이미지의 크기를 구하기 위한 getImageWidth(), getImageHeight() 메소드 추가생성함.
     jai_codec.jar, jai_core.jar 이 필요함.

   **  메이븐을 사용하는 경우
    :  jai_codec.jar, jai_core.jar 파일 Maven dependency

    <repository>
          <id>osgeo</id>
          <name>OSGeo Release Repository</name>
          <url>https://repo.osgeo.org/repository/release/</url>
          <snapshots><enabled>false</enabled></snapshots>
          <releases><enabled>true</enabled></releases>
        </repository>   

    <dependency>
        <groupId>javax.media</groupId>
        <artifactId>jai_core</artifactId>
        <version>1.1.3</version>
    </dependency>

    <dependency>
        <groupId>javax.media</groupId>
        <artifactId>jai_codec</artifactId>
        <version>1.1.3</version>
    </dependency>



  9. 기존의 com.spring.common.FileManager 클래스에서 
   - 이미지의 크기를 구하기 위한 getImageWidth(), getImageHeight() 메소드를 아래와 같이 추가생성함.

	// 이미지 폭
	public int getImageWidth(String pathname) {
	   int width=-1;
		
	   File file = new File(pathname);
	     if (! file.exists())
		return width;
		
	   ParameterBlock pb=new ParameterBlock(); 
           pb.add(pathname); 
           RenderedOp rOp=JAI.create("fileload",pb); 

           BufferedImage bi=rOp.getAsBufferedImage(); 

           width = bi.getWidth(); 		
		
	   return width;
	}
		
	// 이미지 높이
	public int getImageHeight(String pathname) {
	   int height=-1;
		
	   File file = new File(pathname);
	     if (! file.exists())
		return height;
		
	   ParameterBlock pb=new ParameterBlock(); 
           pb.add(pathname); 
           RenderedOp rOp=JAI.create("fileload",pb); 

           BufferedImage bi=rOp.getAsBufferedImage(); 

           height = bi.getHeight();		
		
	   return height;
	}

 

 10. HTML5 를 지원하지 않는 브라우저(IE9 이하)를 위한 단일사진첨부 컨트롤러를 작성합니다.
     /Board/src/main/java/com/spring/board/BoardController.java 에서

    @RequestMapping(value="/image/photoUpload.action", method={RequestMethod.POST})
    public String photoUpload(PhotoVO photovo, MultipartHttpServletRequest req) {
	    
	String callback = photovo.getCallback();
	String callback_func = photovo.getCallback_func();
	String file_result = "";
	    
	if(!photovo.getFiledata().isEmpty()) {
	   // 파일이 존재한다라면
			
		/*
		   1. 사용자가 보낸 파일을 WAS(톰캣)의 특정 폴더에 저장해주어야 한다.
		   >>>> 파일이 업로드 되어질 특정 경로(폴더)지정해주기
		        우리는 WAS 의 webapp/resources/files 라는 폴더로 지정해준다.
		 */
			
		// WAS 의 webapp 의 절대경로를 알아와야 한다. 
		HttpSession session = req.getSession();
		String root = session.getServletContext().getRealPath("/"); 
		String path = root + "resources"+File.separator+"photo_upload";
		// path 가 첨부파일들을 저장할 WAS(톰캣)의 폴더가 된다. 
			
		System.out.println(">>>> 확인용 path ==> " + path); 
		// >>>> 확인용 path ==> C:\springworkspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\Board\resources\photo_upload  
			
			
		// 2. 파일첨부를 위한 변수의 설정 및 값을 초기화한 후 파일올리기
		String newFileName = "";
		// WAS(톰캣) 디스크에 저장할 파일명 
			
		byte[] bytes = null;
		// 첨부파일을 WAS(톰캣) 디스크에 저장할때 사용되는 용도 
						
		try {
			bytes = photovo.getFiledata().getBytes(); 
			// getBytes()는 첨부된 파일을 바이트단위로 파일을 다 읽어오는 것이다. 
			/* 2-1. 첨부된 파일을 읽어오는 것
	  		        첨부한 파일이 강아지.png 이라면
				이파일을 WAS(톰캣) 디스크에 저장시키기 위해
				byte[] 타입으로 변경해서 받아들인다.
			*/ 
			
                        // 2-2. 이제 파일올리기를 한다.
			String original_name = photovo.getFiledata().getOriginalFilename();
			//  photovo.getFiledata().getOriginalFilename() 은 첨부된 파일의 실제 파일명(문자열)을 얻어오는 것이다. 
			newFileName = fileManager.doFileUpload(bytes, original_name, path);
				
			// System.out.println(">>>> 확인용 newFileName ==> " + newFileName); 

			int width=fileManager.getImageWidth(path+File.separator+newFileName);
			 
                        if(width>600)
			   width=600;
	
			String CP = req.getContextPath();
			file_result += "&bNewLine=true&sFileName="+newFileName+"&sWidth="+width+"&sFileURL="+CP+"/resources/photo_upload/"+newFileName; 
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		} else {
			// 파일이 존재하지 않는다라면
			file_result += "&errstr=error";
		}
	    
		return "redirect:" + callback + "?callback_func="+callback_func+file_result;
	}


  이제 IE를 실행하여 단일업로드를 확인해보도록 하겠습니다.(HTML 5를 지원하지 않는 IE9 이하 브라우저용)
  ※ 만약 IE10 이상이며 다중파일업로드 화면이 출력이 된다 하시면(HTML 5를 지원하는 브라우저임.) 
     
     attach_photo.js 파일의 38번째줄을 보시면 checkDragAndDropAPI() 함수내에 존재하는
     
     bSupportDragAndDropAPI = true; 을 
     bSupportDragAndDropAPI = false; 으로 변경해주어야 한다.



 11. /Board/src/main/java/com/spring/board/BoardController.java 에서
    
     글쓰기 또는 글내용변경시 스마트 에디터를 사용한다면 엔터(\r\n) 을 <br/>로 변경하는것을 사용하면 안됨!!!

     //	String content = boardvo.getContent();
     //	content = content.replaceAll("\r\n", "<br/>");
     //	boardvo.setContent(content);
      
   
     // ===== #62. 글 1개를 보여주는 페이지 요청하기 =====
     @RequestMapping(value="/view.action", method={RequestMethod.GET})
     public String view(HttpServletRequest req, HttpSession session) {
	
	  String seq = req.getParameter("seq");
	  // 글번호 받아오기
		
	  // ===== #68. 글조회수(readCount)증가 (DML문 update)는
	  /*            반드시 해당 글제목을 클릭했을 경우에만 증가되고  웹브라우저에서 새로고침(F5)을 했을 경우에는 
	                증가가 안되도록 한다.===== */
	  BoardVO boardvo = null;
		
	  if(session.getAttribute("readCountPermission") != null && 
	     "yes".equals(session.getAttribute("readCountPermission")) 
	       // 이미 위의 #69. 글목록 보기 페이지 요청 에서 
	       // session.setAttribute("readCountPermission", "yes"); 으로 해주었다.
	       // session 에 저장된 값중에서 키값이 "readCountPermission" 을 읽어왔을 때 
	       // 그 밸류값이 "yes" 이라면
	     )	{
			
	           boardvo = service.getView(seq); 
		   // 조회수(readCount) 증가한 후에  글 1개 가져오는 것
			
		   session.setAttribute("readCountPermission", "no");
		   // 중요함!!  session의 밸류값을 "yes"에서 "no"로 변경함. 
		}
		else{
		      // 새로고침(F5)을 했을 경우
		      boardvo = service.getViewWithNoAddCount(seq); // 조회수(readCount) 증가 없이 그냥 글 1개 가져오는 것      
		}
		
		/*
		   글내용에 엔터("\r\n")가 들어가 있으면  엔터("\r\n")를 <br/>로 대체시켜서  request 영역으로 넘긴다.  
		 */
	//	String content = boardvo.getContent();
	//	content = content.replaceAll("\r\n", "<br/>");
	//	boardvo.setContent(content);
		
		req.setAttribute("boardvo", boardvo);
		
		// === #94. 댓글쓰기가 있는 게시판인 경우 원글의 내용과 함께 원글에 딸린 댓글의 내용도 보여준다  === //
		List<CommentVO> commentList = service.listComment(seq);
		req.setAttribute("commentList", commentList);
		
		return "board/view.tiles2";
		// ==> /Board/src/main/webapp/WEB-INF/views2/board/view.jsp 파일을 생성한다.
	}



 12. HTML5 드래그앤드롭 기능을 이용한 스마트에디터 다중파일업로드 관련 컨트롤러를 작성합니다.

    /Board/src/main/java/com/spring/board/BoardController.java 에서

   // ==== #스마트에디터. 드래그앤드롭을 사용한 다중사진 파일업로드 ====
   @RequestMapping(value="/image/multiplePhotoUpload.action", method={RequestMethod.POST})
   public void multiplePhotoUpload(HttpServletRequest req, HttpServletResponse res) {
	    
	/*
	   1. 사용자가 보낸 파일을 WAS(톰캣)의 특정 폴더에 저장해주어야 한다.
	   >>>> 파일이 업로드 되어질 특정 경로(폴더)지정해주기
	        우리는 WAS 의 webapp/resources/photo_upload 라는 폴더로 지정해준다.
	 */
		
	// WAS 의 webapp 의 절대경로를 알아와야 한다. 
	HttpSession session = req.getSession();
	String root = session.getServletContext().getRealPath("/"); 
	String path = root + "resources"+File.separator+"photo_upload";
	// path 가 첨부파일들을 저장할 WAS(톰캣)의 폴더가 된다. 
		
	// System.out.println(">>>> 확인용 path ==> " + path); 
	// >>>> 확인용 path ==> C:\springworkspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\Board\resources\photo_upload  
		
	File dir = new File(path);
	if(!dir.exists())
	    dir.mkdirs();
		
	String strURL = "";
		
	try {
		if(!"OPTIONS".equals(req.getMethod().toUpperCase())) {
		    String filename = req.getHeader("file-name"); //파일명을 받는다 - 일반 원본파일명
	    		
	        // System.out.println(">>>> 확인용 filename ==> " + filename); 
	        // >>>> 확인용 filename ==> berkelekle%ED%8A%B8%EB%9E%9C%EB%94%9405.jpg
	    		
	    	   InputStream is = req.getInputStream();
	    	/*
	          요청 헤더의 content-type이 application/json 이거나 multipart/form-data 형식일 때,
	          혹은 이름 없이 값만 전달될 때 이 값은 요청 헤더가 아닌 바디를 통해 전달된다. 
	          이러한 형태의 값을 'payload body'라고 하는데 요청 바디에 직접 쓰여진다 하여 'request body post data'라고도 한다.

               	  서블릿에서 payload body는 Request.getParameter()가 아니라 
            	  Request.getInputStream() 혹은 Request.getReader()를 통해 body를 직접 읽는 방식으로 가져온다. 	
	    	*/
	    	   String newFilename = fileManager.doFileUpload(is, filename, path);
	    	
		   int width = fileManager.getImageWidth(path+File.separator+newFilename);
			
		   if(width > 600)
		      width = 600;
				
		// System.out.println(">>>> 확인용 width ==> " + width);
		// >>>> 확인용 width ==> 600
		// >>>> 확인용 width ==> 121
	    	
		   String CP = req.getContextPath(); // board
			
		   strURL += "&bNewLine=true&sFileName="; 
            	   strURL += newFilename;
            	   strURL += "&sWidth="+width;
            	   strURL += "&sFileURL="+CP+"/resources/photo_upload/"+newFilename;
	    	}
		
	    	/// 웹브라우저상에 사진 이미지를 쓰기 ///
		   PrintWriter out = res.getWriter();
		   out.print(strURL);
	} catch(Exception e){
			e.printStackTrace();
	}
   
   }


 ※ 먼저 IE를 실행하여 다중파일업로드를 확인해보기전 아래와 같이 설정을 변경해야 한다.
    (다중파일업로드가 지원되는 브라우저는 HTML 5를 지원하는 브라우저로서 
     IE10 이상, 크롬, 파이어폭스임)
     
     attach_photo.js 파일의 38번째줄을 보시면 checkDragAndDropAPI() 함수내에 존재하는
     
     bSupportDragAndDropAPI = false; 를 (false면 파일을 1개만 올린다)
     bSupportDragAndDropAPI = true; 으로 변경해주어야 한다.	(true면 다중파일첨부가 가능하다)























