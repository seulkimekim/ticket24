<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="finalproject4">

	<!-- === MainPage === -->
	<select id="getProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, to_char(date_start, 'yyyy-mm-dd') as date_start, to_char(date_end, 'yyyy-mm-dd') as date_end
		     , to_char(info_open_date, 'yyyy-mm-dd') as info_open_date, to_char(info_close_date, 'yyyy-mm-dd') as info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, map_id
		from prod
		where fk_category_id = #{category}
		order by info_open_date desc
	</select>
	
	<select id="getHotProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, to_char(date_start, 'yyyy-mm-dd') as date_start, to_char(date_end, 'yyyy-mm-dd') as date_end
		     , to_char(info_open_date, 'yyyy-mm-dd') as info_open_date, to_char(info_close_date, 'yyyy-mm-dd') as info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, map_id
		from prod
		where fk_category_id = #{category}
		order by info_qnty desc
	</select>
	
	<select id="getlocalRecProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, to_char(date_start, 'yyyy-mm-dd') as date_start, to_char(date_end, 'yyyy-mm-dd') as date_end
		     , to_char(info_open_date, 'yyyy-mm-dd') as info_open_date, to_char(info_close_date, 'yyyy-mm-dd') as info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, map_id
		from prod
		where fk_category_id = #{category}
		order by info_qnty desc
	</select>
	
	<select id="getCategoryName" parameterType="String" resultType="String">
		select category_name
		from yes_show_category
		where category_id = #{category}
	</select>
	
	<resultMap type="HashMap" id="detailCategoryName">
		<result property="category_detail_id"	column="category_detail_id"		javaType="String"/>
		<result property="category_detail_name"	column="category_detail_name"	javaType="String"/>
	</resultMap>
	<select id="getdetailCategoryName" parameterType="String" resultMap="detailCategoryName">
		select category_detail_id, category_detail_name
		from yes_show_category_detail
		where category_id = #{category}
	</select>
	
	<!-- 카테고리 select show list -->
	<resultMap type="HashMap" id="selectOneMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectOne" parameterType="HashMap" resultMap="selectOneMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_qnty desc
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectTwoMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectTwo" parameterType="HashMap" resultMap="selectTwoMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_open_date desc
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectThreeMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectThree" parameterType="HashMap" resultMap="selectThreeMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_close_date
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectFourMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectFour" parameterType="HashMap" resultMap="selectFourMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by prod_title
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<select id="getTotalCnt" parameterType="HashMap" resultType="String">
		select count(*)
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		    ) V
	</select>
	
	
	<!-- === Pay(예매하기) 관련 === -->
	<resultMap type="HashMap" id="resShowInfo">
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="info_grade"		column="info_grade"		javaType="String"/>
		<result property="info_run_time"	column="info_run_time"	javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
	</resultMap>
	<select id="getShowRsvInfo" resultMap="resShowInfo" parameterType="String">
		select prod_id, prod_img, prod_title, info_grade, info_run_time, map_name 
		from view_rev_showInfo
		where prod_id = #{showNum}
	</select>
	
	<resultMap type="HashMap" id="resShowTime">
		<result property="date_showday"		column="date_showday"	javaType="String"/>
		<result property="date_showtime"	column="date_showtime"	javaType="String"/>
	</resultMap>
	<select id="getShowTime" resultMap="resShowTime" parameterType="String">
		select prod_id, to_char(date_showday, 'yyyy-mm-dd') || ' ' || to_char(date_showday, 'day') as date_showday, date_showtime
		from yes_show_date
		where prod_id = #{showNum} <!-- and date_showday > sysdate -->
		order by date_showday, date_showtime
	</select>
	
	<select id="getShowDay" resultType="String" parameterType="String">
		select distinct to_char(date_showday, 'yyyy-mm-dd') || ' ' || to_char(date_showday, 'day') as date_showday
		from yes_show_date
		where prod_id = #{showNum} <!-- and date_showday > sysdate -->
		order by date_showday
	</select>
	
	<resultMap type="HashMap" id="seatStatus">
		<result property="date_id"			column="date_id"		javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="seattype_id"		column="seattype_id"	javaType="String"/>
		<result property="seat_type"		column="seat_type"		javaType="String"/>
		<result property="seat_name"		column="seat_name"		javaType="String"/>
		<result property="seat_price"		column="seat_price"		javaType="String"/>
		<result property="seat_status"		column="seat_status"	javaType="String"/>
		<result property="date_id"			column="date_id"		javaType="String"/>
		<result property="seat_color"		column="seat_color"		javaType="String"/>
	</resultMap>
	<select id="getSeatStatus" parameterType="String" resultMap="seatStatus">
		select date_id, prod_id, seattype_id, seat_type, seat_name, seat_price, seat_status, seat_color
		from view_seat_info
		where date_id = #{dateID}
	</select>
	
	<resultMap type="HashMap" id="seatType">
		<result property="seat_type"		column="seat_type"	javaType="String"/>
		<result property="seat_price"		column="seat_price"	javaType="String"/>
		<result property="seat_color"		column="seat_color"	javaType="String"/>
	</resultMap>
	<select id="getSeatType" resultMap="seatType" parameterType="String">
		select seat_type, seat_price, seat_color
		from yes_seat_type
		where prod_id = #{showNum}
	</select>
	
	<select id="getDateId" parameterType="HashMap" resultType="String">
		select date_id
		from yes_show_date
		where prod_id = #{showNum} and to_char(date_showday, 'yyyy-mm-dd') || ' ' || to_char(date_showday, 'day') = #{showDay} and date_showtime = #{showRound}
	</select>
	
	<resultMap type="HashMap" id="takeCoupon">
		<result property="coupon_id"			column="coupon_id"		javaType="String"/>
		<result property="coupon_dc"			column="coupon_dc"		javaType="String"/>
		<result property="coupon_name"			column="coupon_name"	javaType="String"/>
	</resultMap>
	<select id="takeCoupon" parameterType="String" resultMap="takeCoupon">
		select coupon_id, coupon_dc, coupon_name
		from yes_coupon
		where fk_userid = #{userid2} and coupon_status = 1
	</select>
	
	<insert id="reserveInsert" parameterType="HashMap">
		insert into yes_reserve(rev_id, prod_id, user_id, date_id, rev_email, rev_qnty, rev_date, rev_price, rev_ship_method, rev_pay_method, rev_pay_status)
		values(seq_reserve.nextval, #{showNum}, #{userid}, #{dateID}, #{email}, #{seatCnt}, default, #{paySum}, #{receiveMethod}, #{payMethodNum}, #{payStatus})
	</insert>
	
	<update id="updateSeat" parameterType="HashMap">
		update yes_show_seat set seat_status = 1 where seat_name like '%' || #{selSeat} || '%' and date_id = #{dateID}
	</update>
	
	<insert id="insertSeatList" parameterType="HashMap">
		INSERT INTO yes_paySeat(paySeat_id, date_id, seat_name, user_id) VALUES (seq_paySeat.nextval, #{dateID}, #{selSeat}, #{userid})
	</insert>
	
	<select id="getRevId" parameterType="HashMap" resultType="String">
		select max(rev_id)
		from yes_reserve
		where prod_id = #{showNum} and user_id = #{userid} and date_id = #{dateID}
	</select>
	
	<insert id="reserveStatusInsert" parameterType="HashMap">
		INSERT INTO yes_rev_status(status_id, rev_id, status, status_cng_date) VALUES (seq_rev_status.nextval, #{revId}, #{payStatus}, default)
	</insert>
	
	<select id="getMap" resultType="String" parameterType="String">
		select map_name
		from yes_show_map M
		join prod P
		on P.map_id = M.map_id
		where P.prod_id = #{showNum}
	</select>
	
	<update id="useCoupon" parameterType="String">
		update yes_coupon
		set coupon_status = 0, coupon_usedate = sysdate
		where coupon_id = #{couponId}
	</update>
	
	<update id="updatePoint" parameterType="HashMap">
		update yes_member
		set point = point + #{paySum}*0.01
		where userid = #{userid}
	</update>
	
	<insert id="insertPoint" parameterType="HashMap">
		insert into yes_point(point_id, fk_userid, content, point, fk_rev_date) 
		values(seq_point.nextval, #{userid}, '예매 포인트 적립', #{paySum}*0.01, sysdate)
	</insert>
	
	<select id="getPoint" parameterType="String" resultType="String">
		select point
		from yes_member
		where userid = #{userid}
	</select>
	
	<update id="updatePoint2" parameterType="HashMap">
		update yes_member
		set point = point - #{usePoint}
		where userid = #{userid}
	</update>
	
	<!-- ### 바꿈 ### -->
	<insert id="insertPoint2" parameterType="HashMap">
		insert into yes_point(point_id, fk_userid, content, point, fk_rev_date) 
		values(seq_point.nextval, #{userid}, '포인트 사용!', #{usePoint}, sysdate)
	</insert>
	
	
	
	<!-- ===== BOARD(공지사항, FAQ, QNA, 리뷰 부분 ===== -->
	<!-- FAQ 리스트(검색어 있음) -->
	<select id="faqList" parameterType="HashMap" resultType="com.spring.model.FaqVO">
		select faq_id, fk_userid, subject, content, regDate, status, faq_cate_name
		from(
		select rownum as rno, faq_id, fk_userid, subject, content, regDate, status, faq_cate_name
		from 
		(
		select faq_id, fk_userid, C.faq_cate_name, fk_category, subject, content, regDate, status
		from yes_faq F join yes_faq_cate C
		on F.fk_category = C.faq_cate_code
		) T
		where 1=1 
		<if test='category != ""'>
		and fk_category = #{category} 
		</if>
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
		) V
		where rno between #{startRno} and ${endRno}
	</select>
	
	<!-- ###  -->
	
	<!-- 총  FAQ 글 개수 -->
	<select id="getTotalFaqCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from yes_faq
		where 1=1 
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
		<if test='category != ""'>
		and fk_category = #{category}
		</if>
	</select>
	
	<!-- 총 공지글 개수 -->
	<select id="getTotalNoticeCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from yes_notice
		where 1=1 
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
	</select>
	
	<!-- 페이징처리한 공지글 리스트 -->
	<select id="noticeListWithPaging" parameterType="HashMap" resultType="com.spring.model.NoticeVO">
		select notice_id, fk_userid,no_cate_name,category,ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
		    from
		    (
		        select row_number() over(order by ${order} desc) AS rno, notice_id,fk_userid,no_cate_name,category,ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
		        from
		        (
			        select notice_id,fk_userid,no_cate_name,category,nvl(ticketopenday, ' ') as ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
			        from yes_notice N join yes_notice_cate C
			        on N.category = C.no_cate_code
            		order by notice_id desc
		        )
		        where status = 1
		        <if test='searchWord != ""'>
		        and lower(subject) like '%' || lower(#{searchWord}) || '%'
		        </if>
		    )V
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 공지사항 글 1개 보기 페이지로 이동(조회수 증가 없음) -->
	<select id="getView" parameterType="HashMap" resultType="com.spring.model.NoticeVO">
		<!-- select previousseq, previoussubject
		       , notice_id,fk_userid,category, ticketopenday, subject, readCount
		       , content, regDate
		       , fileName,orgFilename,fileSize
			   , nextseq, nextsubject
				from
				    (
		                select lag(notice_id, 1) over(order by notice_id desc) as previousseq
				       , lag(subject, 1) over(order by notice_id desc) as previoussubject
				       
				       , notice_id, fk_userid, category, subject, readCount
		               , nvl(ticketopenday, ' ') as ticketopenday
				       , content, to_char(regDate, 'yyyy-mm-dd') as regDate
				       , status, fileName, orgFilename, fileSize
				       
				       , lead(notice_id, 1) over(order by notice_id desc) as nextseq
				       , lead(subject, 1) over(order by notice_id desc) as nextsubject
		                from yes_notice
		                where status = 1
				    ) V
		where notice_id = #{seq} -->
		<!-- select previousseq, previoussubject
		       , notice_id,fk_userid,no_cate_name,category, ticketopenday, subject, readCount
		       , content, regDate
		       , fileName,orgFilename,fileSize
			   , nextseq, nextsubject
				from
				    (
		                select lag(notice_id, 1) over(order by notice_id desc) as previousseq
				       , lag(subject, 1) over(order by notice_id desc) as previoussubject
				       
				       , notice_id, fk_userid, no_cate_name, category, subject, readCount
		               , nvl(ticketopenday, ' ') as ticketopenday
				       , content, to_char(regDate, 'yyyy-mm-dd') as regDate
				       , status, fileName, orgFilename, fileSize
				       
				       , lead(notice_id, 1) over(order by notice_id desc) as nextseq
				       , lead(subject, 1) over(order by notice_id desc) as nextsubject
		                from 
                        (
	                        select notice_id,fk_userid,no_cate_name,category,ticketopenday,subject,content,pw,readCount,regDate,status,fileName,orgFilename,fileSize
	                        from yes_notice N join yes_notice_cate C
	                        on N.category = C.no_cate_code
                        ) T
		                where status = 1
				    ) V
		where notice_id = #{seq} -->
		select previousseq, previoussubject
		       , notice_id,fk_userid,no_cate_name,category, ticketopenday, subject, readCount
		       , content, regDate, prod_id, prod_title, prod_img
		       , fileName,orgFilename,fileSize
			   , nextseq, nextsubject
				from
				    (
		                select lag(notice_id, 1) over(order by notice_id desc) as previousseq
				       , lag(subject, 1) over(order by notice_id desc) as previoussubject
				       
				       , notice_id, fk_userid, no_cate_name, category, subject, readCount
		               , nvl(ticketopenday, ' ') as ticketopenday, prod_id, prod_title, prod_img
				       , content, to_char(regDate, 'yyyy-mm-dd') as regDate
				       , status, fileName, orgFilename, fileSize
				       
				       , lead(notice_id, 1) over(order by notice_id desc) as nextseq
				       , lead(subject, 1) over(order by notice_id desc) as nextsubject
		                from 
                        (
	                        select notice_id,fk_userid,no_cate_name,N.category,ticketopenday, P.prod_id, P.prod_title, P.prod_img, N.subject, N.content, readCount, N.regDate, N.status,fileName,orgFilename,fileSize
	                        from yes_notice N left join yes_notice_cate C
	                        on N.category = C.no_cate_code
                            left join prod P
                            on P.prod_id = N.prod_id
                        ) T
		                where status = 1
				    ) V
		where notice_id = #{seq}
	</select>
	
	
	<!-- 공지사항 글1개 보기 조회수 증가 -->
	<update id="setAddReadCount" parameterType="String">
		update yes_notice set readCount = readCount + 1
		where notice_id = #{seq}
	</update>
	
	
	<!-- qna 테이블에서 groupno 컬럼의 최대값 구하기 -->
	<select id="getGroupnoMax" resultType="int">
		select nvl(max(groupno),0)
		from yes_qna
	</select>
	<!-- 최초에는 max(groupno) 가 없으므로 null 이니까 nvl 로 null 을 0 으로 처리한다. -->
	
	<!-- Qna 문의 등록하기 -->
	<insert id="qnaAdd" parameterType="HashMap">
		insert into yes_qna (qna_id, fk_userid, name, category, fk_rev_id, subject, content, groupno, fk_seq, depthno)
		values(qnaSeq.nextval, #{fk_userid}, #{name}, #{category}, #{fk_rev_id}, #{subject}, #{content}, #{groupno}, 0, 0)
	</insert>
	
	<!-- 로그인한 회원의 예매공연목록과 예매공연코드 가져오기 -->
	<resultMap type="HashMap" id="reserveTitleList">
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
	</resultMap>
	<select id="reserveTitleList" parameterType="String" resultMap="reserveTitleList">
		select distinct prod_title, prod_id
		from view_rev_memberInfo
		where userid = #{userid}
	</select>
	
	<!-- qna 글목록 보여주기 -->
	<select id="qnaList" parameterType="HashMap" resultType="com.spring.model.QnaVO">
		<!-- select *
		from(
		    select rownum as rno, qna_id, fk_userid, name, category, qna_cate_name, subject, content, readcount, regDate, secret, adminread, adminans, status, groupno, fk_seq, depthno
		          ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		    from view_qna_info
		    where status = 1
		    <if test='searchWord != ""'>
	        and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
	        </if>
		    <if test='category != ""'>
			and category = #{category}
			</if>
		    order by qna_id desc
		)T
		where rno between #{startRno} and #{endRno} -->
		select qna_id, fk_userid, name, qna_cate_name, subject, content
                 , regDate, adminread, adminans, groupno, fk_seq, depthno
                 ,fk_rev_id, prod_id, prod_img, prod_title
		from 
		(
		    select rownum AS rno
		         , qna_id, fk_userid, name, qna_cate_name, subject, content
                 , regDate, adminread, adminans, groupno, fk_seq, depthno
                 ,fk_rev_id, prod_id, prod_img, prod_title
		    from
		    (
		        select qna_id, fk_userid, name, qna_cate_name, subject, content
                        , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate, adminread, adminans, groupno, fk_seq, depthno
                        ,fk_rev_id, prod_id, prod_img, prod_title
		        from view_qna_info
		        where status = 1
		        <if test='searchWord != ""'>
		        and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
		        </if>
			    <if test='category != ""'>
				and category = #{category}
				</if>
		        start with fk_seq = 0
		        connect by prior qna_id = fk_seq
		        order siblings by groupno desc, qna_id asc
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 총 qna 개수 -->
	<select id="getTotalQnaCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from view_qna_info
		where 1=1 
		<if test='searchWord != ""'>
		and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
		</if>
		<if test='category != ""'>
		and category = #{category}
		</if>
	</select>
	
	
	<!-- qna 글 1개 보기 페이지로 이동 -->
	<select id="getQnaView" parameterType="String" resultType="com.spring.model.QnaVO">
		<!-- select qna_id, fk_userid, name, category, qna_cate_name, subject, content, regDate, adminread, adminans, groupno, fk_seq, depthno
        	  ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		from view_qna_info
		where qna_id = #{seq} -->
		select previousseq, previoussubject
	       , qna_id, fk_userid, name, category, qna_cate_name, subject, content, regDate, adminread, adminans, groupno, fk_seq, depthno
	       , fk_rev_id, prod_id, prod_img, prod_title
	       , nextseq, nextsubject
	        from
	            (
	               select lag(qna_id, 1) over(order by qna_id desc) as previousseq
	               , lag(subject, 1) over(order by qna_id desc) as previoussubject
	               
	               , qna_id, fk_userid, name, category, qna_cate_name, subject, content, to_char(regDate, 'yy-mm-dd') as regDate, adminread, adminans, groupno, fk_seq, depthno
	               , fk_rev_id, prod_id, prod_img, prod_title
	               
	               , lead(qna_id, 1) over(order by qna_id desc) as nextseq
	               , lead(subject, 1) over(order by qna_id desc) as nextsubject
	               
	                from view_qna_info
	                where status = 1
	            ) V
		where qna_id = #{seq} 
	</select>
	
	<!-- Qna 답변 등록하기 -->
	<insert id="qnaAddAdmin" parameterType="com.spring.model.QnaVO">
		insert into yes_qna(qna_id,fk_userid,name,category,subject,content,groupno,fk_seq,depthno)
		values(qnaSeq.nextval, #{fk_userid}, #{name}, #{category}, #{subject}, #{content}, #{groupno}, #{fk_seq}, #{depthno})
	</insert>
	
	<!-- 공지사항 글 등록하기(첨부파일 O) -->
	<insert id="noticeAdd_withFile" parameterType="com.spring.model.NoticeVO">
		<if test="prod_id != 0">
		insert into yes_notice(notice_id,fk_userid,category,ticketopenday,subject,content, prod_id, fileName, orgFilename, fileSize)
		values(noticeSeq.nextval, #{fk_userid}, #{category}, #{ticketopenday}, #{subject}, #{content}, #{prod_id}, #{fileName}, #{orgFilename}, #{fileSize})
		</if>
		<if test="prod_id == 0">
		insert into yes_notice(notice_id,fk_userid,category,ticketopenday,subject,content, prod_id, fileName, orgFilename, fileSize)
		values(noticeSeq.nextval, #{fk_userid}, #{category}, #{ticketopenday}, #{subject}, #{content}, 0, #{fileName}, #{orgFilename}, #{fileSize})
		</if>
	</insert>
	
	<!-- 공지사항 글 등록하기(첨부파일 X) -->
	<insert id="noticeAdd" parameterType="com.spring.model.NoticeVO">
		<if test="prod_id != 0">
		insert into yes_notice(notice_id,fk_userid,category,ticketopenday,subject,content,prod_id)
		values(noticeSeq.nextval, #{fk_userid}, #{category}, #{ticketopenday}, #{subject}, #{content},#{prod_id})
		</if>
		<if test="prod_id == 0">
		insert into yes_notice(notice_id,fk_userid,category,ticketopenday,subject,content,prod_id)
		values(noticeSeq.nextval, #{fk_userid}, #{category}, #{ticketopenday}, #{subject}, #{content},0)
		</if>
	</insert>

	<!-- 관리자가 Qna 글 1개 보기 클릭시 Adminread 상태를 0 -> 1로 바꿈. -->
	<update id="setAdminRead" parameterType="String">
		update yes_qna set adminread = 1
		where qna_id = #{seq}
	</update>

	<!-- 관리자가 답변등록시 해당 참조글번호 fk_seq 의 문의글을 답변완료로 업데이트 -->
	<update id="updateAdminans" parameterType="String">
		update yes_qna set adminans = 1
		where qna_id = #{fk_seq}
	</update>
	
	<!-- qna 답변 수정하기 -->
	<update id="qnaEditAdmin" parameterType="com.spring.model.QnaVO">
		update yes_qna set subject = #{subject} , content = #{content}
		where qna_id = #{qna_id}
	</update>
	
	<!-- qna 답변 삭제하기 -->
	<update id="qnaDelAdmin" parameterType="String">
		update yes_qna set status = 0 
		where qna_id = #{qna_id}
	</update>
	
	
	<!-- 공지 삭제하기 -->
	<update id="noticeDel" parameterType="String">
		update yes_notice set status = 0 
		where notice_id = #{notice_id}
	</update>
	
	<!-- 공지 수정하기 -->
	<update id="noticeEdit" parameterType="com.spring.model.NoticeVO">
		<!-- update yes_notice set category = #{category}, ticketopenday = #{ticketopenday}, subject = #{subject}, content = #{content}
		where notice_id = #{notice_id} -->
		update yes_notice set category = #{category}, subject = #{subject}, content = #{content}
		where notice_id = #{notice_id}
	</update>
	
	<!-- 공연명으로 티켓오픈일자 검색  -->
	<select id="ticketopenSearchList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, prod_title, prod_img, to_char(info_open_date, 'yyyy.mm.dd') || '(' || to_char(info_open_date,'dy') || ')' as  info_open_date, info_close_date
		from prod
		where prod_title like '%' || #{prod_title} || '%'
	</select>

	<!-- ===== BOARD(공지사항, FAQ, QNA, 리뷰 부분 ===== -->
	

	<select id="getTotalProdCount" parameterType="HashMap" resultType="int">
		select count(*)
      	from prod
      	where status = 1 
      	<if test="searchWord != ''">
      	and lower(prod_title) like '%'|| lower(#{searchWord}) || '%'
      	</if>
   	</select>

   	<select id="prodList" parameterType="HashMap" resultType="com.spring.model.ProdVO">
      	select RNO, prod_id, category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, map_id
      	from (
          	select ROW_NUMBER() OVER (ORDER BY prod_id desc) as RNO, prod_id, category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, map_id
          	from (
              	select P.prod_id, C.category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, M.map_id, status
              	from prod P join yes_show_category C
              	on P. fk_category_id = C.category_id
              	left join yes_show_map M
              	on P.prod_id = M. prod_id
              	order by P.prod_id
          	) V
          	where status = 1 
          	<if test="searchWord != ''">
             	and lower(prod_title) like '%' || lower(#{searchWord}) || '%'
          	</if>
      	) T
      	where rno between #{startRno} and #{endRno}
   	</select>
	
	
	
	
	
	<!-- ===== Member ===== -->
	<!-- === #47. 로그인 처리하기 === -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.model.MemberVO">
		select idx, userid, name, email, point
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
			 , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from yes_member 
		where status = 1 and 
		      userid = #{userid} and 
		      pwd = #{pwd}
	</select>
	<update id="setLastLoginDate" parameterType="HashMap">
		update yes_member set lastLoginDate = sysdate 
		where status = 1 and userid = #{userid}
	</update>


	
	<!-- API 회원으로 등록이 되어있는지 확인 -->
	<select id="kakaoMember" resultType="com.spring.model.MemberVO" parameterType="HashMap">
		select idx, userid, name, email, point
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
		     , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from yes_member 
		where status = 1 and 
		      email = #{email} 
	</select>

	<!-- 아이디 중복 유무 -->
	<select id="idDuplicateCheck" resultType="String" parameterType="String">
		select userid 
		from yes_member
		where userid = #{userid}
	</select>

	<!-- 카카오 회원가입 -->
	<!-- <insert id="kakaoRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, '1', default)
	</insert> -->
	
	<!-- 카카오 회원가입 -->
	<insert id="kakaoRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, '1', default, #{isSMS}, #{isEMAIL})
	</insert>
	
	
	<!-- 일반 회원 가입 -->
	<!-- <insert id="register" parameterType="com.spring.model.MemberVO">
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, default, default)
	</insert>  -->
	
	<!-- 일반 회원 가입 -->
	<insert id="register" parameterType="com.spring.model.MemberVO">
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, default, default, #{isSMS}, #{isEMAIL})
	</insert>
	
	<!-- 이메일 중복 유무 -->
	<select id="emailDuplicateCheck" resultType="String" parameterType="String">
		select userid
		from yes_member 
		where ( status = 1 and
		      email = #{email} and 
		      kakaoStatus = '1')
		      or
		      ( status = 1 and
		      email = #{email} and 
		      naverStatus = '1')	
	
	</select>

	<!-- 카카오 상태 변경 -->
	<update id="kakaoStatus" parameterType="String">
		update yes_member
		set kakaoStatus = '1'
		where status = 1 and email = #{email}
	</update>

	<!-- 네이버 상태 변경 -->
	<update id="naverStatus" parameterType="String">
		update yes_member
		set naverStatus = '1'
		where status = 1 and email = #{email}
	</update>
	
	<!-- 네이버 회원가입 -->
	<!-- <insert id="naverRegister" parameterType="com.spring.model.MemberVO" >
			insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
			values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, default, '1')
	</insert> -->
	
	<!-- 네이버 회원가입 -->
	<insert id="naverRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, default, '1', #{isSMS}, #{isEMAIL})
	</insert>
	
	
	
	<!-- 회원 수정 페이지 -->
	<select id="modifyInfo" parameterType="String" resultType="com.spring.model.MemberVO">
		select userid, name, postcode, address, detailaddress, hp1, hp2, hp3, email, isSMS, isEMAIL
		from yes_member
		where idx = #{idx}
	</select>
	
	
	<update id="modifyEnd" parameterType="HashMap">
		update yes_member
		<if test="pwd.equals('')">
		set name = #{name}, email = #{email}, hp1 = #{hp1}, hp2 = #{hp2}, hp3 = #{hp3}, postcode = #{postcode}, address = #{address}, detailAddress = #{detailAddress}, isSMS = #{isSMS}, isEMAIL = #{isEMAIL}
		</if>
		<if test="!pwd.equals('')">
		set name = #{name}, pwd = #{pwd}, email = #{email}, hp1 = #{hp1}, hp2 = #{hp2}, hp3 = #{hp3}, postcode = #{postcode}, address = #{address}, detailAddress = #{detailAddress}, isSMS = #{isSMS}, isEMAIL = #{isEMAIL}
		</if>
		where idx = #{idx}
	</update>
	
	<!-- 로그인된 경우 해당 세션id와 유효시간을 사용자 테이블에 세팅한다. -->
    <update id="keepLogin" parameterType="HashMap">
        update yes_member 
        set sessionKey = #{sessionId}, sessionLimit = #{sessionLimit}
        where status = 1 and userid = #{userid}
    </update>
     
    <!-- 유효기간이 남아 있으면서 해당 sessionId를 가지는 사용자 정보를 꺼내오는 부분 -->
    <select id="checkUserWithSessionKey" resultType="com.spring.model.MemberVO">
        select idx, userid, name, email, point
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
			 , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
        from yes_member
        where status = 1 and  sessionKey = #{sessionId} and sessionLimit > sysdate
    </select>

	<!-- 회원 탈퇴 -->
	<update id="infoDelete" parameterType="HashMap">
		update yes_member
		set status = 0
		where idx = #{idx} and pwd = #{pwd} 
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="findID" parameterType="HashMap" resultType="String">
		select userid
		from yes_member
		where status = 1 and name = #{name} and (trim(hp1) || trim(hp2) || trim(hp3)) = #{mobile}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPW" parameterType="HashMap" resultType="String">
		select userid
		from yes_member
		where status = 1 and userid = #{userid} and email = #{email}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePW" parameterType="HashMap">
		update yes_member
		set pwd = #{pwd}
		where status = 1 and userid = #{userid}
	</update>
	
	
	<resultMap type="HashMap" id="pointMap">
		<result property="point_id"  		column="point_id" 		javaType="String"/>
		<result property="fk_userid" 		column="fk_userid"      javaType="String"/>
		<result property="content" 	   		column="content"     	javaType="String"/>
		<result property="fk_rev_date"      column="fk_rev_date"    javaType="String"/>
		<result property="point"        column="point"      javaType="String"/>
	</resultMap>
	<select id="pointList" parameterType="String" resultMap="pointMap">
		select point_id, fk_userid, content, point, to_char(fk_rev_date, 'yyyy.mm.dd hh24:mi:ss') AS fk_rev_date
		from yes_point 
		where fk_userid = #{userid}
		order by fk_rev_date desc
	</select>
	
	
	
	<resultMap type="HashMap" id="qnaMap">
		<result property="qna_cate_name" column="qna_cate_name" javaType="String"/>
		<result property="subject" 		 column="subject"       javaType="String"/>
		<result property="regDate" 	   	 column="regDate"     	javaType="String"/>
		<result property="adminans"      column="adminans"   	javaType="String"/>
		<result property="content"       column="content"   	javaType="String"/>
	</resultMap>
	<select id="qnaList3" parameterType="String" resultMap="qnaMap">
		select A.qna_cate_name AS qna_cate_name
		     , B.subject AS subject
		     , to_char(B.regDate, 'yyyy.mm.dd hh24:mi:ss') AS regDate
		     , B.adminans AS adminans
		     , B.content AS content
		from yes_qna_cate A, yes_qna B
		where A.qna_cate_code = B.category and B.fk_userid = #{userid}
		order by regDate asc
	</select>
	
	<select id="qnaCount" resultType="String" parameterType="String">
		select count(*)
		from yes_qna
		where fk_userid = #{userid}
	</select>
	
	<select id="couponCount" resultType="String" parameterType="String">
		select count(*)
		from yes_coupon
		where fk_userid = #{userid} and coupon_status = 1
	</select>
	
	
	<resultMap type="HashMap" id="couponMap">
		<result property="coupon_id" 		column="coupon_id" 			javaType="String"/>
		<result property="coupon_dc" 		column="coupon_dc"      	javaType="String"/>
		<result property="coupon_olddate" 	column="coupon_olddate" 	javaType="String"/>
		<result property="coupon_condition" column="coupon_condition"   javaType="String"/>
		<result property="coupon_name"      column="coupon_name"   		javaType="String"/>
	</resultMap>
	<select id="couponList" parameterType="String" resultMap="couponMap">
		select coupon_id, coupon_dc, to_char(coupon_olddate, 'yyyy.mm.dd hh24:mi:ss') as coupon_olddate, coupon_condition, coupon_name
		from yes_coupon
		where coupon_status = 1 and fk_userid = #{userid}
		order by coupon_olddate asc
	</select>
	
	
	<resultMap type="HashMap" id="qnaMap2">
		<result property="user_subject" 		column="user_subject" 			javaType="String"/>
		<result property="user_content"      	column="user_content"   		javaType="String"/>
		<result property="admin_content"      	column="admin_content"   		javaType="String"/>
		<result property="user_regDate"      	column="user_regDate"   		javaType="String"/>
		<result property="admin_regDate"      	column="admin_regDate"   		javaType="String"/>
	</resultMap>
	<select id="qnaList2" parameterType="String" resultMap="qnaMap2">
		select A.subject as user_subject
			 , A.content as user_content
			 , B.content as admin_content
			 , to_char(A.regDate, 'yyyy.mm.dd hh24:mi:ss') as user_regDate
			 , to_char(B.regDate, 'yyyy.mm.dd hh24:mi:ss') as admin_regDate
		from yes_qna A left outer join yes_qna B
		on A.qna_id = B.fk_seq 
		where A.fk_userid = #{userid}
		order by user_regDate asc
	</select>
	
	
	
	<!-- 내 예매 내역 -->
	<resultMap type="HashMap" id="myReserveMap">
		<result property="rev_date" 	column="rev_date" 		javaType="String"/>
		<result property="prod_title" 	column="prod_title" 	javaType="String"/>
		<result property="prod_id" 		column="prod_id" 		javaType="String"/>
		<result property="prod_img" 	column="prod_img" 		javaType="String"/>
		<result property="date_start" 	column="date_start" 	javaType="String"/>
		<result property="date_end" 	column="date_end" 		javaType="String"/>
		<result property="rev_id" 		column="rev_id" 		javaType="String"/>
		<result property="rev_qnty" 	column="rev_qnty" 		javaType="String"/>
		<result property="map_name" 	column="map_name" 		javaType="String"/>
		<result property="date_showday" column="date_showday" 	javaType="String"/>
		<result property="cancel_day" 	column="cancel_day" 	javaType="String"/>
		<result property="status" 		column="status" 		javaType="String"/>
	</resultMap>
	<select id="myReserveList" parameterType="String" resultMap="myReserveMap">
		select to_char(R.rev_date, 'yyyy.mm.dd') AS rev_date
		       , P.prod_title AS prod_title
		       , P.prod_id AS prod_id
		       , P.prod_img AS prod_img
		       , to_char(P.date_start, 'yyyy,mm.dd') AS date_start
		       , to_char(P.date_end, 'yyyy,mm.dd') AS date_end 
		       , R.rev_id AS rev_id
		       , R.rev_qnty AS rev_qnty
		       , M.map_name AS map_name
		       , to_char(D.date_showday, 'yyyy.mm.dd') || '(' || to_char(D.date_showday, 'dy')   || ') ' || to_char(D.date_showday, 'hh24:mm') AS date_showday
		       , to_char(D.date_showday - 1, 'yyyy.mm.dd') || '(' || to_char(D.date_showday - 1, 'dy')   || ') ' || to_char(D.date_showday - 1, 'hh24:mm') AS cancel_day
		       , S.status AS status
		from yes_reserve R join prod P
		on R.prod_id = P.prod_id
		join yes_show_map M
		on P.map_id = M.map_id
		join yes_show_date D
		on R.date_id = D.date_id
		join yes_rev_status S
		on R.rev_id = S.rev_id
		where R.user_id = #{userid}
	</select>
	
	<!-- 내 예매 개수 -->
	<select id="reserveCount" parameterType="String" resultType="String">
		select count(*)
		from yes_reserve R, yes_rev_status S 
		where R.rev_id = S.rev_id and S.status = 1 and R.user_id = #{userid}
	</select>


	<resultMap type="HashMap" id="myReviewMap">
		<result property="prod_img" 	column="prod_img" 	javaType="String"/>
		<result property="prod_id" 		column="prod_id" 	javaType="String"/>
		<result property="prod_title" 	column="prod_title" javaType="String"/>
		<result property="regDate" 		column="regDate" 	javaType="String"/>
		<result property="content" 		column="content" 	javaType="String"/>
		<result property="review_id" 	column="review_id" 	javaType="String"/>
	</resultMap>
	<!-- 내 리뷰 내역 -->
	<select id="myReviewList" parameterType="String" resultMap="myReviewMap">
		select p.prod_img as prod_img
		      , p.prod_id as prod_id
		      , p.prod_title as prod_title
		      , to_char(V.regDate, 'yyyy.mm.dd') as regDate
		      , V.content  as content
		      , V.review_id as review_id
		from prod P, yes_review V
		where P.prod_id = V.parentProdId  and V.status = 1 and fk_userid = #{userid}
	</select>


	<!-- 내 리뷰 개수 -->
	<select id="reviewCount" parameterType="String" resultType="String">
		select count(*)
		from yes_review
		where status = 1 and fk_userid = #{userid}
	</select>
	
	
	
	<resultMap type="HashMap" id="myLikeMap">
		<result property="prod_img" column="prod_img" javaType="String" />
		<result property="prod_id"  column="prod_id"  javaType="String" />
	</resultMap>
	<!-- 내 선호 공연 내역 -->
	<select id="myLikeList" parameterType="String" resultMap="myLikeMap">
		select P.prod_img as prod_img, P.prod_id as prod_id
		from prod P, like_prod L
		where P.prod_id = L.fk_parentProdId and L.fk_userid = #{userid} 
	</select>
	
	
	<!-- 선호공연 개수 -->
	<select id="likeCount" parameterType="String" resultType="String">
		select count(*)
		from like_prod
		where fk_userid = #{userid}
	</select>
	
	<!-- 마이티켓에서 내 리뷰 삭제 -->
	<update id="myReviewDelete" parameterType="HashMap">
		update yes_review set status = 0
		where review_id = #{review_id} and fk_userid = #{userid}
	</update>
	
	<!-- 마이티켓에서 내 리뷰 수정 -->
	<update id="updateReviewEnd" parameterType="HashMap">
		update yes_review set star = #{star}, content = #{content}, regDate = sysdate
		where review_id = #{review_id} and status = 1
	</update>
	
	
	<!-- AOP pointPlus -->
	<update id="pointPlus" parameterType="HashMap">
		update yes_member set point = point + to_number(#{pointPlus})
		where userid = #{userid}
	</update>
	
	
	<!-- 쿠폰 관련 SQL -->
	<select id="getCouponIs" parameterType="HashMap" resultType="Integer">
		select count(*)
		from yes_coupon
		where fk_userid=#{userid} and coupon_name=#{couponName} and coupon_status=1
	</select>
	
	<!-- 쿠폰 발급받기 -->
	<insert id="getCoupon" parameterType="HashMap">
		insert into yes_coupon(coupon_id, coupon_dc, coupon_status, coupon_newdate, coupon_usedate, coupon_olddate, coupon_name, coupon_condition, fk_userid) 
		values(seq_coupon.nextval, #{couponDC}, 1, sysdate, null, sysdate+7, #{couponName}, default, #{userid}) 
	</insert>
	

	<!-- ### 상품의 상세정보 (detail, calendar, review)  ### -->
	<!-- 상품상세페이지로 이동 -->
	<select id="prodDetail" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, prod_img, prod_detail_img, prod_title, to_char(info_open_date, 'yyyy-mm-dd') as info_open_date, to_char(info_close_date, 'yyyy-mm-dd') as info_close_date, info_grade, info_run_time
    		 , map_name, map_address, local 
		from view_detail_prod
		where prod_id = #{seq}
	</select>

	<!-- 상품의 좌석종류정보 -->
	<resultMap type="HashMap" id="seattypeListMap">
		<result property="seat_type"  column="seat_type"  javaType="String" />	
		<result property="seat_price" column="seat_price" javaType="String" />	
		<result property="seat_color" column="seat_color" javaType="String" />	
	</resultMap>

	<select id="seattypeList" parameterType="String" resultMap="seattypeListMap">
		select seat_type, seat_price, seat_color
		from yes_seat_type
		where prod_id = #{seq}
	</select>

	<!-- 상품의 날짜정보 -->
	<resultMap type="HashMap" id="dateListMap">
		<result property="date_id"  column="date_id"  javaType="String" />	
		<result property="date_showday"  column="date_showday"  javaType="String" />	
		<result property="date_showtime" column="date_showtime" javaType="String" />	
	</resultMap>

	<select id="dateList" parameterType="String" resultMap="dateListMap">
		select distinct date_id, to_char(date_showday, 'yyyy-mm-dd') || ' (' || to_char(date_showday, 'dy') || ')' as date_showday, date_showtime
		from yes_show_date
		where prod_id = #{seq}
		order by date_showday
		<!-- select date_id, date_showday, date_showtime
		from yes_show_date
		where prod_id =#{seq} -->
		<!-- select distinct to_char(date_showday, 'yyyy-mm-dd') as date_showday
		from yes_show_date -->
	</select>

	<!-- 달력의 선택날짜와 같은 showdateList 를 보여주는 정보 -->
	<resultMap type="HashMap" id="showDateListMap">
		<result property="date_id"  	 column="date_id"  		javaType="String" />	
		<result property="prod_id"  	 column="prod_id"  		javaType="String" />
		<result property="date_showday"  column="date_showday"  javaType="String" />	
		<result property="date_showtime" column="date_showtime" javaType="String" />	
	</resultMap>

	<select id="showDateList" parameterType="HashMap" resultMap="showDateListMap">
		select date_id, prod_id, to_char(date_showday, 'yyyy-mm-dd') as date_showday, date_showtime
		from yes_show_date
		where prod_id=#{seq} and to_char(date_showday, 'yyyy-mm-dd') = #{date}
	</select>
	
	<!-- 공연의 회차별, 좌석타입별 잔여좌석 구하기 -->
	<resultMap type="HashMap" id="remainSeatListMap">
		<result property="seattype_id"  	column="seattype_id"  	javaType="String" />	
		<result property="seat_type"  	 	column="seat_type"  	javaType="String" />
		<result property="seat_price"  		column="seat_price"  	javaType="String" />	
		<result property="seat_color" 		column="seat_color" 	javaType="String" />
		<result property="remainseatCnt" 	column="remainseatCnt"  javaType="String" />
	</resultMap>
	<select id="remainSeatList" parameterType="HashMap" resultMap="remainSeatListMap">
		select S.seattype_id, seat_type, seat_price, seat_color, remainseatCnt
		from yes_seat_type T join (
		    select seattype_id, count(*) as remainseatCnt
		    from(
		        select *
		        from (
		            select seat_id, seattype_id, seat_name, seat_status, D.date_id, D.prod_id, date_showday, date_showtime
		            from yes_show_seat S join yes_show_date D
		            on S.date_id = D.date_id
		        )T
				where T.prod_id = #{prod_id} and seat_status = 0
				<if test="date_id != 0">
					and date_id = #{date_id}
				</if>
		    )
		    group by seattype_id
		) S
		on T.seattype_id = S.seattype_id
	</select>
		
	
	<!-- 리뷰시퀀스 채번하기 -->	
	<select id="selectReviewSeq" resultType="String">
		select reviewSeq.nextval
		from dual
	</select>
	
	
	<!-- 리뷰등록하기 -->
	<insert id="addReview" parameterType="HashMap">
		<!-- 
		<if test="date_id == ''">
		insert into yes_review (review_id, fk_userid, name, content, star, parentProdId)
		values(reviewSeq.nextval, #{fk_userid}, #{name}, #{content}, #{star}, #{parentProdId})
		</if>
		<if test="date_id != ''">
        insert into yes_review (review_id, fk_userid, name, content, star, parentProdId, date_id)
		values(reviewSeq.nextval, #{fk_userid}, #{name}, #{content}, #{star}, #{parentProdId}, #{date_id})
        </if> 
        -->
        <if test="date_id == ''">
		insert into yes_review (review_id, fk_userid, name, content, star, parentProdId)
		values(#{seq}, #{fk_userid}, #{name}, #{content}, #{star}, #{parentProdId})
		</if>
		<if test="date_id != ''">
        insert into yes_review (review_id, fk_userid, name, content, star, parentProdId, date_id)
		values(#{seq}, #{fk_userid}, #{name}, #{content}, #{star}, #{parentProdId}, #{date_id})
        </if> 
	</insert>
	
	<!-- 해당 상품에 달린 리뷰목록 가져오기 -->
	<select id="reviewList" parameterType="HashMap" resultType="com.spring.model.ReviewVO">
		<!-- select review_id, fk_userid, name, content, star, regDate, parentProdId, status
		from yes_review
		where status = 1 and parentProdId = #{parentProdId}
		order by review_id desc -->
		<!-- select rno, review_id, fk_userid, name, content, star, regDate, parentProdId, status
		from(
			select rownum as rno, review_id, fk_userid, name, content, star, to_char(regDate, 'yyyy-mm-dd') as regDate, parentProdId, status
			from yes_review
			where status = 1 and parentProdId = #{parentProdId}
			order by review_id desc
		) T
		where rno between #{startRno} and #{endRno} -->
		<!-- select rno, review_id, fk_userid, name, content, star, regDate, parentProdId, status
		from(
			select rownum as rno, review_id, fk_userid, name, content, star, regDate, parentProdId, status
			from 
            (select review_id, fk_userid, name, content, star, to_char(regDate, 'yyyy-mm-dd') as regDate, parentProdId, status
            from yes_review
			where status = 1 and parentProdId = #{parentProdId}
			order by review_id desc
            )T
		) T
		where rno between #{startRno} and #{endRno} -->
		select rno, review_id, fk_userid, name, content, star, regDate, parentProdId, date_id, status, date_showday, date_showtime
		from(
		    select rownum as rno, review_id, fk_userid, name, content, star, regDate, parentProdId, date_id, status , date_showday, date_showtime
		    from 
		    (
		    select review_id, fk_userid, name, content, star, regDate, parentProdId, date_id, status, date_showday, date_showtime
		    from 
		    (
		        select review_id, fk_userid, name, content, star, to_char(regDate, 'yyyy-mm-dd') as regDate, parentProdId, D.date_id, status, to_char(date_showday, 'yyyy-mm-dd') as date_showday, date_showtime
		        from yes_review R left join yes_show_date D
		        on R.date_id = D.date_id
		    ) W
		    where status = 1 and parentProdId = #{parentProdId}
		    order by review_id desc
		    )T
		) V
		where rno between #{startRno} and #{endRno}
	</select>

	<!-- 해당 상품(parentProdId) 에 해당하는 총 리뷰수 알아오기 -->
	<select id="getReviewTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from yes_review
		where status = 1 and parentProdId = #{parentProdId}
	</select>

	<!-- 해당 상품(parentProdId) 에 해당하는 평점 알아오기 -->
	<select id="getReviewAvgStar" parameterType="HashMap" resultType="double">
		select round(sum(star)/count(*),2)
		from 
		(
		    select * 
		    from yes_review
		    where status = 1
		) V
		group by parentProdId
		having(parentProdId = #{parentProdId})
	</select>

	<!-- 리뷰 삭제하기 -->
	<update id="delReview" parameterType="HashMap">
		update yes_review set status = 0 
		where review_id = #{review_id} and fk_userid = #{fk_userid}
	</update>
	
	<!-- 리뷰 수정하기 -->
	<update id="editReview" parameterType="HashMap">
		update yes_review set content = #{content}, star = #{star}
		where status = 1 and review_id = #{review_id}
	</update>
	
	<!-- 관심상품 등록하기 -->
	<insert id="likeProd" parameterType="HashMap">
		insert into like_prod(seq, fk_userid, fk_parentProdId)
		values(likeProdSeq.nextval, #{fk_userid}, #{prod_id})
	</insert>
	
	<!-- 관심상품 해제하기 -->
	<delete id="dislikeProd" parameterType="HashMap">
		delete from like_prod
		where fk_parentProdId = #{prod_id} and fk_userid = #{fk_userid}
	</delete>
	
	
	<!-- 해당상품의 관심상품 등록수  -->
	<select id="likeProdCnt" parameterType="HashMap" resultType="int">
		select count(*)
		from like_prod
		where fk_parentProdId = #{prod_id}
	</select>
	
	
	<!-- 같은 아이디의 같은 관심상품이 존재하는지 확인 -->
	<select id="existlike" parameterType="HashMap" resultType="int">
		select count(*)
		from like_prod
		where fk_parentProdId = #{prod_id} and fk_userid = #{fk_userid}
	</select>
		
	<!-- mapInfoList -->
	<resultMap type="HashMap" id="mapInfoMap">	
		<result property="prod_id"  	column="prod_id"  		javaType="String" />
		<result property="map_id"  	 	column="map_id"  		javaType="String" />
		<result property="map_name"  	column="map_name"  		javaType="String" />	
		<result property="map_address" 	column="map_address" 	javaType="String" />	
		<result property="local" 		column="local" 			javaType="String" />
		<result property="map_lat" 		column="map_lat" 		javaType="String" />
		<result property="map_lng" 		column="map_lng" 		javaType="String" />
		<result property="map_url" 		column="map_url" 		javaType="String" />
	</resultMap>
	<select id="mapInfo" parameterType="HashMap" resultMap="mapInfoMap">
		select prod_id, map_id, map_name, map_address, local, map_lat, map_lng, map_url
		from view_detail_prod
		where prod_id = #{prod_id}
	</select>
	
	<!-- 리뷰 추천하기 -->
	<insert id="likeReview" parameterType="HashMap" >
		insert into like_review (seq, fk_userid, fk_parentReviewId ,fk_parentProdId)
		values(likeReviewSeq.nextval, #{loginuserid}, #{review_id}, #{fk_parentProdId})
	</insert>
	
	<!-- 리뷰 추천 취소하기 -->
	<delete id="dislikeReview" parameterType="HashMap" >
		delete from like_review
		where fk_parentReviewId = #{review_id} and fk_userid = #{loginuserid}
	</delete>
	
	
	<!-- 리뷰 추천이 이미 존재하는지 확인 -->
	<select id="existLikeReview" parameterType="HashMap" resultType="int">
		select count(*)
		from like_review
		where fk_userid = #{loginuserid} and fk_parentReviewId = #{review_id}
	</select>
	
	<!-- 해당 공연에 대한 추천있는 리뷰와 추천수 -->
	<!-- 
	<resultMap type="HashMap" id="reviewLikeListMap">
		<result property="fk_parentReviewId" column="fk_parentReviewId" javaType="String" />
		<result property="reviewlikecnt" 	 column="reviewlikecnt" 	javaType="String" />
	</resultMap>
	<select id="reviewLikeList" parameterType="HashMap" resultMap="reviewLikeListMap">
		select fk_parentReviewId, count(*) as reviewlikecnt
		from like_review
		group by fk_parentProdID, fk_parentReviewId
		having fk_parentProdID = 1
		order by fk_parentProdID, fk_parentReviewId
	</select>
	 -->
	 
	 
	<!-- 로그인한 유저가 좋아요한 댓글 번호 목록 -->
	<select id="reviewLikeList" parameterType="HashMap" resultType="String">
		select fk_parentReviewId
		from like_review
		where fk_userid = #{fk_userid} and fk_parentProdID = #{parentProdId}
	</select>
	
	
	<!-- 공연에 달린 리뷰의 추천수  -->
	<resultMap type="HashMap" id="reviewLikecntMap">
		<result property="fk_parentReviewId" column="fk_parentReviewId" javaType="String" />
		<result property="reviewlikecnt" 	 column="reviewlikecnt" 	javaType="String" />
	</resultMap>
	<select id="reviewLikecntList" parameterType="HashMap" resultMap="reviewLikecntMap">
		select fk_parentReviewId, count(*) as reviewlikecnt
		from like_review
		group by fk_parentProdID, fk_parentReviewId
		having fk_parentProdID = 1
		order by fk_parentProdID, fk_parentReviewId
	</select>
	
	
	<!-- 리뷰 등록 성공시 포인트 증가(트랜잭션) -->
	<update id="pointAdd" parameterType="HashMap">
		update yes_member set point = point + to_number(#{point})
		where userid = #{fk_userid}
	</update>
	
	
	<!-- 리뷰 등록 성공시 포인트 테이블에 적립내용 입력(트랜잭션) -->
	<insert id="pointInsertReview" parameterType="HashMap">
		insert into yes_point(point_id, fk_userid, content, point, fk_rev_date, fk_rev_id, fk_review_id) 
		values(seq_point.nextval, #{fk_userid}, #{pointcontent}, #{point}, sysdate, 0, #{seq})
	</insert>
	
	
	<!-- 리뷰 삭제 성공시 포인트 회수(트랜잭션) -->
	<update id="pointRemove" parameterType="HashMap">
		update yes_member set point = point - to_number(#{point})
		where userid = #{fk_userid}
	</update>
	
	
	<!-- 리뷰 삭제 성공시 포인트테이블 내용삭제 (트랜잭션) -->
	<insert id="pointDeleteReview" parameterType="HashMap">
		delete from yes_point 
		where fk_review_id = #{review_id}
	</insert>
	
	
	 
	<!-- 로그인한 회원의 해당 공연 관람일시와 공연코드 가져오기 -->
	<resultMap type="HashMap" id="viewInfoListMap">
		<result property="rev_id" 		column="rev_id" 		javaType="String" />
		<result property="prod_id" 	 	column="prod_id" 		javaType="String" />
		<result property="date_id" 	 	column="date_id" 		javaType="String" />
		<result property="date_showday" column="date_showday" 	javaType="String" />
	</resultMap>
	<select id="viewInfoList" parameterType="HashMap" resultMap="viewInfoListMap">
		select distinct rev_id, prod_id, date_id, to_char(date_showday, 'yy/mm/dd') as date_showday
		from view_revdate_Info
		where userid = #{userid} and prod_id = #{seq}
	</select>
	 
		
	<!-- ### 상품의 상세정보 (detail, calendar, review)  ### -->


</mapper>